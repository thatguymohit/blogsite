<?php

/**
 * @file
 * W3CSS Theme.theme.
 *
 * Filename:     drupal8_w3css_theme.theme
 * Website:      http://www.flashwebcenter.com
 * Description:  template
 * Author:       Alaa Haddad http://www.alaahaddad.com.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 */
function drupal8_w3css_theme_preprocess_html(&$variables) {
  // Add node id to the body class.
  $variables['path_info']['args'] = FALSE;

  $routeMatch = \Drupal::routeMatch();
  // Test route name.
  switch ($routeMatch->getRouteName()) {

    // Add node id to the body class.
    case 'entity.node.canonical':
      $node_id = $routeMatch->getParameter('node')->id();

      if ($node_id) {
        $variables['attributes']['class'][] = 'path-node-' . $node_id;
      }
      break;

    // Add vocabulary name and term id to the body class.
    case 'entity.taxonomy_term.canonical':
      $term = $routeMatch->getParameter('taxonomy_term');

      if ($term->id()) {
        $variables['attributes']['class'][] = 'path-taxonomy-term-' . $term->id();
      }
      if ($term->bundle()) {
        $variables['attributes']['class'][] = 'path-vocabulary-' . Html::cleanCssIdentifier($term->bundle());
      }
      break;
  }

  // If the user is logged in use ID if not use second word after user/login.
  $curr_path = \Drupal::service('path.current')->getPath();
  $curr_path = ltrim($curr_path, '/');
  $user_url = explode('/', $curr_path);
  if (isset($user_url[0], $user_url[1]) && ($user_url[0] == 'user')) {
    $variables['attributes']['class'][] = 'path-user-' . $user_url[1];
  }

  // Add view id name to the body class.
  $view_id = $routeMatch->getParameter('view_id');

  if ($view_id) {
    $variables['attributes']['class'][] = 'path-view-' . Html::cleanCssIdentifier($view_id);
  }

  /** @var \Drupal\Core\Routing\AdminContext $admin_context */
  $admin_context = \Drupal::service('router.admin_context');
  if ($admin_context->isAdminRoute()) {
    $variables['attributes']['class'][] = 'admin-context';
  }

}

/**
 * Implements hook_preprocess_page() for page templates.
 */
function drupal8_w3css_theme_preprocess_page(&$variables) {
  // Top regions variables.
  $has_top_first = !empty($variables['page']['top_first']);
  $has_top_second = !empty($variables['page']['top_second']);
  $has_top_third = !empty($variables['page']['top_third']);
  // Main regions variables.
  $has_sidebar_first = !empty($variables['page']['sidebar_first']);
  $has_sidebar_second = !empty($variables['page']['sidebar_second']);
  // Bottom regions variables.
  $has_bottom_first = !empty($variables['page']['bottom_first']);
  $has_bottom_second = !empty($variables['page']['bottom_second']);
  $has_bottom_third = !empty($variables['page']['bottom_third']);
  $has_bottom_forth = !empty($variables['page']['bottom_forth']);
  // Footer regions variables.
  $has_footer_first = !empty($variables['page']['footer_first']);
  $has_footer_second = !empty($variables['page']['footer_second']);
  $has_footer_third = !empty($variables['page']['footer_third']);
  // Add W3.CSS Responsive classes to Top Container.
  if ($has_top_first && $has_top_second && $has_top_third) {
    $variables['top_w3css'] = 'w3-third';
  }
  elseif (($has_top_first && $has_top_second) ||
    ($has_top_first && $has_top_third) ||
    ($has_top_second && $has_top_third)
  ) {
    $variables['top_w3css'] = 'w3-half';
  }
  else {
    $variables['top_w3css'] = 'w3-col';
  }
  // Add W3.CSS Responsive classes to left and right sidebar.
  if ($has_sidebar_first && $has_sidebar_second) {
    $variables['content_w3css'] = 'w3-half';
    $variables['sidebarfirst'] = 'w3-quarter';
    $variables['sidebarsecond'] = 'w3-quarter';
  }
  elseif ($has_sidebar_first) {
    $variables['content_w3css'] = 'w3-threequarter';
    $variables['sidebarfirst'] = 'w3-quarter';
  }
  elseif ($has_sidebar_second) {
    $variables['content_w3css'] = 'w3-threequarter';
    $variables['sidebarsecond'] = 'w3-quarter';
  }
  else {
    $variables['content_w3css'] = 'w3-col';
  }

  // Add 3col stacked equal width.
  $variables['equal_width'] = theme_get_setting('equal_width');
  if ($variables['equal_width'] != NULL) {
    if ($has_sidebar_first && $has_sidebar_second) {
      $variables['content_w3css'] = 'w3-third';
      $variables['sidebarfirst'] = 'w3-third';
      $variables['sidebarsecond'] = 'w3-third';
    }
    elseif ($has_sidebar_first) {
      $variables['content_w3css'] = 'w3-twothird';
      $variables['sidebarfirst'] = 'w3-third';
    }
    elseif ($has_sidebar_second) {
      $variables['content_w3css'] = 'w3-twothird';
      $variables['sidebarsecond'] = 'w3-third';
    }
    else {
      $variables['content_w3css'] = 'w3-col';
    }
  }
  // Add W3.CSS Responsive classes to Bottom Container.
  if ($has_bottom_first && $has_bottom_second && $has_bottom_third && $has_bottom_forth) {
    $variables['bottom_w3css'] = 'w3-quarter';
  }
  elseif (($has_bottom_first && $has_bottom_second && $has_bottom_third) ||
    ($has_bottom_first && $has_bottom_third && $has_bottom_forth) ||
    ($has_bottom_first && $has_bottom_second && $has_bottom_forth) ||
    ($has_bottom_second && $has_bottom_third && $has_bottom_forth)
  ) {
    $variables['bottom_w3css'] = 'w3-third';
  }
  elseif (($has_bottom_first && $has_bottom_second) ||
    ($has_bottom_first && $has_bottom_third) ||
    ($has_bottom_first && $has_bottom_forth) ||
    ($has_bottom_second && $has_bottom_forth) ||
    ($has_bottom_second && $has_bottom_third) ||
    ($has_bottom_third && $has_bottom_forth)
  ) {
    $variables['bottom_w3css'] = 'w3-half';
  }
  else {
    $variables['bottom_w3css'] = 'w3-col';
  }

  // Add W3.CSS Responsive classes to Footer Container.
  if ($has_footer_first && $has_footer_second && $has_footer_third) {
    $variables['footer_w3css'] = 'w3-third';
  }
  elseif (($has_footer_first && $has_footer_second) ||
    ($has_footer_first && $has_footer_third) ||
    ($has_footer_second && $has_footer_third)
  ) {
    $variables['footer_w3css'] = 'w3-half';
  }
  else {
    $variables['footer_w3css'] = 'w3-col';
  }

  // Mix variables.
  $mvar = [
    'd8w3css_site_gfs',
    'd8w3css_site_gfh',
    'd8w3css_site_gf',
    'd8w3css_google_font_local',
    'd8w3css_font_awesome',
    'full_opacity_onscroll',
    'layout_user_login_custom',
    'pagetitle_animation',
    'breadcrumb_page_title',
    'sitename_animation',
    'border_animation',
    'top_region',
    'main_region',
    'bottom_region',
    'footer_region',
    'website_width',
  ];
  foreach ($mvar as $value) {
    $variables[$value] = theme_get_setting($value);
  }
  // Social Media's $variables.
  $svar = [
    'show_social_icon',
    'facebook_url',
    'twitter_url',
    'pinterest_url',
    'linkedin_url',
    'instagram_url',
    'youtube_url',
    'drupal_url',
    'rss_url',
    'mastodon_url',
    'copyright_text',
    'show_credit_link',
  ];
  foreach ($svar as $value) {
    $variables[$value] = theme_get_setting($value);
  }

  // Color's variables.
  $cvar = [
    'color_page_wrapper',
    'color_header',
    'color_primary_menu',
    'color_welcome_text',
    'color_highlighted',
    'color_top_container',
    'color_top_first',
    'color_top_second',
    'color_top_third',
    'color_page_title',
    'color_main',
    'color_breadcrumb',
    'color_sidebar_first',
    'color_sidebar_second',
    'color_content',
    'color_bottom_container',
    'color_bottom_first',
    'color_bottom_second',
    'color_bottom_third',
    'color_bottom_forth',
    'color_footer_container',
    'color_footer_first',
    'color_footer_second',
    'color_footer_third',
    'color_footer_menu',
    'color_copyright',
  ];
  foreach ($cvar as $value) {
    $variables[$value] = theme_get_setting($value);
  }

  // Check if the curren user on login/register or reset.
  if (theme_get_setting('layout_user_login_custom')) {
    $curr_path = \Drupal::service('path.current')->getPath();
    $curr_path = ltrim($curr_path, '/');
    if ($curr_path == 'user/login' || $curr_path == 'user/register' || $curr_path == 'user/password') {
      unset($variables['page']['sidebar_first'], $variables['page']['sidebar_second']);
      $variables['#attached']['library'][] = 'drupal8_w3css_theme/d8w3css-user-login-custom';
    }
  }

}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function drupal8_w3css_theme_preprocess_node(&$variables) {
  // Remove the "Add new comment" link on teasers or when the comment form is
  // displayed on the page.
  if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
    unset($variables['content']['links']['comment']['#links']['comment-add']);
  }
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function drupal8_w3css_theme_preprocess_breadcrumb(&$variables) {
  if ($variables['breadcrumb'] && !theme_get_setting('breadcrumb_page_title')) {
    $request = \Drupal::request();
    $route_match = \Drupal::routeMatch();
    $page_title = \Drupal::service('title_resolver')
      ->getTitle($request, $route_match->getRouteObject());
    if (!empty($page_title)) {
      $variables['breadcrumb'][] = [
        'text' => $page_title,
      ];
      // Add cache context based on url.
      $variables['#cache']['contexts'][] = 'url';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function drupal8_w3css_theme_preprocess_field__node__created(&$variables) {
  foreach (Element::children($variables['items']) as $item) {
    unset($variables['items'][$item]['content']['#prefix']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for setting classes.
 */
function drupal8_w3css_theme_preprocess_filter_caption(&$variables) {
  $variables['classes'] = isset($variables['classes']) && !empty($variables['classes']) ? $variables['classes'] . ' caption' : 'caption';
}

/**
 * Implements hook_preprocess_HOOK() for comment.html.twig.
 */
function drupal8_w3css_theme_preprocess_comment(&$variables) {
  // Getting the node creation time stamp from the comment object.
  $date = $variables['comment']->getCreatedTime();
  // Formatting "created" as "X days ago".
  $variables['created'] = t('@time ago', [
    '@time' => \Drupal::service('date.formatter')
      ->formatInterval(\Drupal::time()->getRequestTime() - $date),
  ]);
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function drupal8_w3css_theme_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

  // drupal8_w3css_theme has custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'drupal8_w3css_theme/templates/layout/maintenance_page';
}

/**
 * Implements hook_page_attachments_alter().
 */
function drupal8_w3css_theme_page_attachments_alter(array &$attachments) {

  // Load default fonts - Global.
  if (!theme_get_setting('d8w3css_site_gf') || (theme_get_setting('d8w3css_site_gf') == 'none')) {
    if (theme_get_setting('d8w3css_google_font_local')) {
      $attachments['#attached']['library'][] = 'drupal8_w3css_theme/d8w3css-gfin-open-sans';
    }
    else {
      $attachments['#attached']['library'][] = 'drupal8_w3css_theme/d8w3css-gfex-open-sans';
    }
  }
  // Load google fonts locally - Global.
  if (theme_get_setting('d8w3css_google_font_local') && theme_get_setting('d8w3css_site_gf')) {
    $in_font = theme_get_setting('d8w3css_site_gf');
    $current_ingf = 'drupal8_w3css_theme/d8w3css-gfin' . substr($in_font, 7);
    $attachments['#attached']['library'][] = $current_ingf;
  }
  // Load fonts external - Global.
  if (!theme_get_setting('d8w3css_google_font_local') && theme_get_setting('d8w3css_site_gf')) {
    $ex_font = theme_get_setting('d8w3css_site_gf');
    $current_exgf = 'drupal8_w3css_theme/d8w3css-gfex' . substr($ex_font, 7);
    $attachments['#attached']['library'][] = $current_exgf;
  }

  // Load google fonts locally - Heading.
  if (theme_get_setting('d8w3css_google_font_local') && theme_get_setting('d8w3css_site_gfh')) {
    $in_font_h = theme_get_setting('d8w3css_site_gfh');
    $current_ingfh = 'drupal8_w3css_theme/d8w3css-gfin' . substr($in_font_h, 7);
    $attachments['#attached']['library'][] = $current_ingfh;
  }
  // Load fonts external - Heading.
  if (!theme_get_setting('d8w3css_google_font_local') && theme_get_setting('d8w3css_site_gfh')) {
    $ex_font_h = theme_get_setting('d8w3css_site_gfh');
    $current_exgfh = 'drupal8_w3css_theme/d8w3css-gfex' . substr($ex_font_h, 7);
    $attachments['#attached']['library'][] = $current_exgfh;
  }

  // Load special fonts' library.
  if (theme_get_setting('d8w3css_site_gfs')) {
    $ex_font_s = theme_get_setting('d8w3css_site_gfs');
    $current_exgfs = 'drupal8_w3css_theme/d8w3css-gfex' . substr($ex_font_s, 7);
    $attachments['#attached']['library'][] = $current_exgfs;
  }

  // Load default color theme if not.
  if ((!theme_get_setting('current_theme')) || (theme_get_setting('current_theme') == 'none')) {
    $attachments['#attached']['library'][] = 'drupal8_w3css_theme/w3css-default-theme';
  }
  else {
    $my_current_theme = theme_get_setting('current_theme');
    $predefined_theme_filename = 'drupal8_w3css_theme/' . str_replace('w3-theme-', 'w3-css-theme-', $my_current_theme);
    $attachments['#attached']['library'][] = $predefined_theme_filename;
  }

  // Load font awesome.
  switch (theme_get_setting('d8w3css_font_awesome')) {
    case 1:
      $attachments['#attached']['library'][] = 'drupal8_w3css_theme/font-awesome-4-in';
      break;

    case 2:
      $attachments['#attached']['library'][] = 'drupal8_w3css_theme/font-awesome-4-ex';
      break;

    case 3:
      $attachments['#attached']['library'][] = 'drupal8_w3css_theme/font-awesome-5-ex';
      break;

    case 4:
      $attachments['#attached']['library'][] = 'drupal8_w3css_theme/font-awesome-6-ex';
      break;
  }

  // Load full opacity if enabled but not on admin pages.
  /** @var \Drupal\Core\Routing\AdminContext $admin_context */
  $admin_context = \Drupal::service('router.admin_context');
  if ((theme_get_setting('full_opacity_onscroll')) && (!$admin_context->isAdminRoute())) {
    $attachments['#attached']['library'][] = 'drupal8_w3css_theme/d8w3css-full-opacity';
  }

}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 *
 * Changes vertical tabs to container.
 */
function drupal8_w3css_theme_form_node_form_alter(&$form, FormStateInterface $form_state) {

  $form['#theme'] = ['node_edit_form'];
  $form['#attached']['library'][] = 'seven/node-form';

  $form['advanced']['#type'] = 'container';
  $form['meta']['#type'] = 'container';
  $form['meta']['#access'] = TRUE;
  $form['meta']['changed']['#wrapper_attributes']['class'][] = 'container-inline';
  $form['meta']['author']['#wrapper_attributes']['class'][] = 'container-inline';

  $form['revision_information']['#type'] = 'container';
  $form['revision_information']['#group'] = 'meta';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drupal8_w3css_theme_form_comment_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $comment = $form_state->getFormObject()
    ->getEntity();
  /** @var \Drupal\comment\Entity\Comment $comment */
  if ($comment->hasParentComment()) {
    $form['actions']['submit']['#value'] = t('Reply to comment');
  }
  else {
    $form['actions']['submit']['#value'] = t('Post comment');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drupal8_w3css_theme_form_search_block_form_alter(&$form, &$form_state) {
  $form['keys']['#attributes']['placeholder'] = t('Search');
  $form['actions']['submit']['#value'] = '';
  $form['actions']['submit']['#attributes']['class'][] = 'search-button-block';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function drupal8_w3css_theme_form_search_form_alter(&$form, &$form_state) {
  unset($form['help_link']);
}

/**
 * Implements hook_theme_suggestions_block_alter().
 */
function drupal8_w3css_theme_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (!empty($variables['elements']['#id'])) {

    /** @var \Drupal\block\BlockInterface $block */
    $block = \Drupal::entityTypeManager()
      ->getStorage('block')
      ->load($variables['elements']['#id']);
    if ($block) {

      // Add region-specific block theme suggestions.
      $region = $block
        ->getRegion();
      $suggestions[] = 'block__' . $region;
      $suggestions[] = 'block__' . $region . '__' . 'plugin_id' . '__' . $variables['elements']['#plugin_id'];
      $suggestions[] = 'block__' . $region . '__' . 'id' . '__' . $variables['elements']['#id'];
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for menu.
 */
function drupal8_w3css_theme_theme_suggestions_menu_alter(&$suggestions, array $variables) {
  if (isset($variables['attributes']['region'])) {
    $suggestions[] = 'menu__' . $variables['attributes']['region'];
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function drupal8_w3css_theme_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  // Suggest the name for the search block.
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function drupal8_w3css_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {

  $routeMatch = \Drupal::routeMatch();
  // Test route name.
  switch ($routeMatch->getRouteName()) {
    // Suggest the node page according to the content type name.
    case 'entity.node.canonical':
      array_splice($suggestions, 1, 0, 'page__' . $routeMatch->getParameter('node')
        ->bundle());
      break;

    // Suggest the vocabulary page according to the vocabulary name.
    case 'entity.taxonomy_term.canonical':
      array_splice($suggestions, 1, 0, 'page__taxonomy__' . $routeMatch->getParameter('taxonomy_term')
        ->bundle());
      break;

  }
  // Suggest the view page according to the view name.
  if ($view_name = $routeMatch->getRouteObject()->getDefault('view_id')) {
    $suggestions[] = 'page__' . $view_name;
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function drupal8_w3css_theme_theme_suggestions_user_alter(&$suggestions, $variables) {
  $suggestions[] = 'user__' . $variables['elements']['#view_mode'];
}
